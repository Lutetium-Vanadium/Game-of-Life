{"version":3,"sources":["components/Board/functions/init.js","components/Board/functions/update.js","components/Board/Row/index.js","components/Board/Row/Row.js","components/Board/Board.js","components/Board/index.js","actions/setHeight.js","actions/setWidth.js","actions/setSpeed.js","actions/setNumAlive.js","components/DashBoard/DashBoard.js","components/DashBoard/index.js","actions/index.js","App.js","serviceWorker.js","reducer/reducer.js","reducer/index.js","index.js"],"names":["width","height","numAlive","l","i","innerL","j","push","x","Math","floor","random","y","boxes","newBoxes","length","aliveNeighbours","Row","size","className","map","isAlive","key","style","backgroundColor","transition","renders","Board","connect","state","props","useState","initBoxes","setBoxes","boxSize","setBoxSize","intervalInstances","setIntervalInstances","update","setUpdate","pause","setPause","mounted","setMounted","reset","clearAllIntervals","clearInterval","useEffect","maxWidth","window","orientation","innerHeight","innerWidth","setInterval","updateBoxes","speed","item","onClick","dispatch","type","payload","isMobile","DashBoard","setHeight","setHeightCreater","setSpeed","setSpeedCreater","setWidth","setWidthCreater","setNumAlive","setNumAliveCreater","actions","values","setValues","changed","setChanged","open","setOpen","onChange","e","tempValues","target","name","value","marginBottom","display","min","max","step","id","App","Boolean","location","hostname","match","reducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bb5106c.chunk.js","sourcesContent":["export default (width, height, numAlive) => {\n    // generating all the boxes\n    let l = [];\n\n    for (let i = 0; i < height; i++) {\n        let innerL = [];\n        for (let j = 0; j < width; j++) {\n            innerL.push(false);\n        }\n        l.push(innerL);\n    }\n\n    // generating random alive boxes\n    let i = 0;\n    while (i < numAlive) {\n        let x = Math.floor(Math.random() * width);\n        let y = Math.floor(Math.random() * height);\n        if (!l[y][x]) {\n            l[y][x] = true;\n            i++;\n        }\n    }\n\n    return l;\n};\n","export default boxes => {\n    let newBoxes = [...boxes];\n\n    for (let i = 0; i < boxes.length; i++) {\n        for (let j = 0; j < boxes[i].length; j++) {\n            // getting number of alive neighbours\n            let aliveNeighbours = 0;\n\n            if (i > 0 && j > 0) {\n                aliveNeighbours += boxes[i - 1][j - 1] ? 1 : 0;\n            }\n\n            if (i > 0) {\n                aliveNeighbours += boxes[i - 1][j] ? 1 : 0;\n            }\n\n            if (j > 0) {\n                aliveNeighbours += boxes[i][j - 1] ? 1 : 0;\n            }\n\n            if (i < boxes.length - 1 && j < boxes[i].length - 1) {\n                aliveNeighbours += boxes[i + 1][j + 1] ? 1 : 0;\n            }\n\n            if (i < boxes.length - 1) {\n                aliveNeighbours += boxes[i + 1][j] ? 1 : 0;\n            }\n\n            if (j < boxes[i].length - 1) {\n                aliveNeighbours += boxes[i][j + 1] ? 1 : 0;\n            }\n\n            if (i < boxes.length - 1 && j > 0) {\n                aliveNeighbours += boxes[i + 1][j - 1] ? 1 : 0;\n            }\n\n            if (i > 0 && j < boxes[i].length - 1) {\n                aliveNeighbours += boxes[i - 1][j + 1] ? 1 : 0;\n            }\n\n            if (boxes[i][j]) {\n                boxes[i][j] = aliveNeighbours === 2 || aliveNeighbours === 3;\n            } else {\n                boxes[i][j] = aliveNeighbours === 3;\n            }\n        }\n    }\n\n    return newBoxes;\n};\n","import Row from \"./Row\";\n\nexport default Row;\n","import React from \"react\";\n\nexport default function Row({ boxes, size }) {\n    return (\n        <div className=\"row\">\n            {boxes.map((isAlive, i) => (\n                <div\n                    key={`box${i}`}\n                    style={{\n                        backgroundColor: isAlive\n                            ? \"rgb(40, 90, 240)\"\n                            : \"transparent\",\n                        height: size,\n                        width: size,\n                        transition: \"background-color 200ms linear\"\n                    }}\n                ></div>\n            ))}\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { initBoxes, updateBoxes } from \"./functions\";\nimport Row from \"./Row\";\n\nlet renders = 1;\n\nfunction Board(props) {\n    const [boxes, setBoxes] = useState(\n        initBoxes(props.width, props.height, props.numAlive)\n    );\n    const [boxSize, setBoxSize] = useState(0);\n    const [intervalInstances, setIntervalInstances] = useState([]);\n    const [update, setUpdate] = useState(0);\n    const [pause, setPause] = useState(false);\n    const [mounted, setMounted] = useState(false);\n\n    const reset = () => {\n        renders = 1;\n        clearAllIntervals();\n        setUpdate((update + 1) % 10);\n        setBoxes(initBoxes(props.width, props.height, props.numAlive));\n        setPause(false);\n        setMounted(false);\n    };\n\n    const pauseClick = () => {\n        if (pause) {\n            setUpdate(update + 1);\n        } else {\n            clearAllIntervals();\n        }\n        setPause(!pause);\n    };\n\n    const clearAllIntervals = () => {\n        for (let i = 0; i < intervalInstances.length; i++) {\n            clearInterval(intervalInstances[0]);\n        }\n        setIntervalInstances([]);\n    };\n\n    useEffect(() => {\n        let maxHeight = 0.8;\n        let maxWidth = typeof window.orientation !== \"undefined\" ? 1 : 0.7;\n\n        setBoxSize(\n            props.height / props.width >\n                (window.innerHeight * maxHeight) /\n                    (window.innerWidth * maxWidth)\n                ? (window.innerHeight * maxHeight) / props.height\n                : (maxWidth * window.innerWidth) / props.width\n        );\n        setIntervalInstances([\n            ...intervalInstances,\n            setInterval(() => {\n                setBoxes(updateBoxes(boxes));\n                renders += 1;\n            }, 500 / props.speed)\n        ]);\n        setMounted(true);\n        // eslint-disable-next-line\n    }, [update]);\n\n    useEffect(() => {\n        if (mounted) {\n            reset();\n        }\n\n        // eslint-disable-next-line\n    }, [props]);\n\n    return (\n        <div className=\"board\">\n            <div className=\"main-board\">\n                {boxes.map((item, i) => (\n                    <Row key={`row${i}`} boxes={boxes[i]} size={boxSize} />\n                ))}\n            </div>\n            <div className=\"footer\">\n                <button onClick={reset}>Reset</button>\n                <p>Renders: {renders}</p>\n                <button onClick={pauseClick}>\n                    {pause ? \"Unpause\" : \"Pause\"}\n                </button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return { ...state };\n};\n\nexport default connect(mapStateToProps)(Board);\n","import Board from \"./Board\";\n\nexport default Board;\n","export default dispatch => {\n    return height => {\n        dispatch({\n            type: \"SET_HEIGHT\",\n            payload: height\n        });\n    };\n};\n","export default dispatch => {\n    return width => {\n        dispatch({\n            type: \"SET_WIDTH\",\n            payload: width\n        });\n    };\n};\n","export default dispatch => {\n    return speed => {\n        dispatch({\n            type: \"SET_SPEED\",\n            payload: speed\n        });\n    };\n};\n","export default dispatch => {\n    return numAlive => {\n        dispatch({\n            type: \"SET_NUM_ALIVE\",\n            payload: numAlive\n        });\n    };\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport actions from \"actions\";\n\nimport \"styles/hamburger.css\";\n\nconst isMobile = typeof window.orientation !== \"undefined\";\n\nfunction DashBoard({\n    height,\n    numAlive,\n    speed,\n    width,\n    setHeight,\n    setNumAlive,\n    setSpeed,\n    setWidth\n}) {\n    const [values, setValues] = useState({ height, speed, width, numAlive });\n    const [changed, setChanged] = useState(false);\n    const [open, setOpen] = useState(!isMobile);\n\n    const onChange = e => {\n        let tempValues = { ...values };\n        tempValues[e.target.name] = +e.target.value;\n        setValues(tempValues);\n        setChanged(true);\n    };\n\n    const restart = () => {\n        setHeight(values.height);\n        setNumAlive(values.numAlive);\n        setSpeed(values.speed);\n        setWidth(values.width);\n        setChanged(false);\n    };\n\n    return (\n        <div className=\"dashboard\" style={{ height: open ? \"100vh\" : \"20vw\" }}>\n            <div className=\"dashboard-head\">\n                {isMobile ? (\n                    <div\n                        className={`hamburger hamburger--collapse ${\n                            open ? \"is-active\" : \"\"\n                        }`}\n                        onClick={() => setOpen(!open)}\n                    >\n                        <div className=\"hamburger-box\">\n                            <div className=\"hamburger-inner\"></div>\n                        </div>\n                    </div>\n                ) : null}\n                <h2 style={{ marginBottom: 10 }}>Dash Board</h2>\n            </div>\n            <div style={{ display: open ? \"flex\" : \"none\" }} className=\"flex\">\n                <div>\n                    <p>Height: {values.height}</p>\n                    <input\n                        type=\"range\"\n                        name=\"height\"\n                        value={values.height}\n                        onChange={onChange}\n                        min={5}\n                        max={100}\n                        className=\"rangeSlider\"\n                    />\n                    <p>Num Alive: {values.numAlive}</p>\n                    <input\n                        type=\"range\"\n                        name=\"numAlive\"\n                        value={values.numAlive}\n                        onChange={onChange}\n                        min={10}\n                        max={1000}\n                        className=\"rangeSlider\"\n                    />\n                    <p>Speed: {values.speed}</p>\n                    <input\n                        type=\"range\"\n                        name=\"speed\"\n                        value={values.speed}\n                        onChange={onChange}\n                        min={0.1}\n                        max={3}\n                        step={0.1}\n                        className=\"rangeSlider\"\n                    />\n                    <p>Width: {values.width}</p>\n                    <input\n                        type=\"range\"\n                        name=\"width\"\n                        value={values.width}\n                        onChange={onChange}\n                        min={9}\n                        max={180}\n                        className=\"rangeSlider\"\n                    />\n                </div>\n                <button\n                    className=\"submit\"\n                    id={changed ? \"\" : \"disabled\"}\n                    onClick={changed ? restart : null}\n                >\n                    Apply Changes\n                </button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return { ...state };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return actions(dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashBoard);\n","import DashBoard from \"./DashBoard\";\n\nexport default DashBoard;\n","import setHeightCreater from \"./setHeight\";\nimport setWidthCreater from \"./setWidth\";\nimport setSpeedCreater from \"./setSpeed\";\nimport setNumAliveCreater from \"./setNumAlive\";\n\nexport default dispatch => {\n    return {\n        setHeight: setHeightCreater(dispatch),\n        setSpeed: setSpeedCreater(dispatch),\n        setWidth: setWidthCreater(dispatch),\n        setNumAlive: setNumAliveCreater(dispatch)\n    };\n};\n","import React from \"react\";\n\nimport Board from \"components/Board\";\nimport DashBoard from \"components/DashBoard\";\n\nimport \"styles/styles.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"main-page\">\n                <DashBoard />\n                <Board />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const reducer = (\n    state = {\n        width: 40,\n        height: 25,\n        speed: 1.5,\n        numAlive: 132\n    },\n    action\n) => {\n    switch (action.type) {\n        case \"SET_WIDTH\":\n            state = {\n                ...state,\n                width: action.payload\n            };\n            break;\n        case \"SET_HEIGHT\":\n            state = {\n                ...state,\n                height: action.payload\n            };\n            break;\n        case \"SET_SPEED\":\n            state = {\n                ...state,\n                speed: action.payload\n            };\n            break;\n        case \"SET_NUM_ALIVE\":\n            state = {\n                ...state,\n                numAlive: action.payload\n            };\n            break;\n        default:\n            break;\n    }\n\n    return state;\n};\n\nexport default reducer;\n","import reducer from \"./reducer\";\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport \"index.css\";\nimport App from \"App\";\nimport * as serviceWorker from \"serviceWorker\";\nimport reducer from \"reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}